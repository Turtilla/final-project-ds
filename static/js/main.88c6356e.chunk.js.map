{"version":3,"sources":["dmMillionaireNew.ts","index.tsx"],"names":["say","text","send","_context","type","value","scramble","array","i","length","j","Math","floor","random","ans_grammar","confirmation","negation","help","dmMachine","initial","states","idle","on","CLICK","init","TTS_READY","getHelp","explain","entry","ENDSPEECH","askForName","RECOGNISED","target","cond","context","recResult","utterance","indexOf","actions","assign","username","TIMEOUT","prompt","ask","greet","smallTalkHome","smallTalkJob","approveOf","explaining","nomatch","explainRules","selectDifficulty","difficulty","fetchQuestions","invoke","id","src","event","fetch","Request","then","data","json","onDone","safePoint","currentMoney","remainingQuestions","currentQuestion","counter","fiftyFiftyCounter","switchCounter","questionsList","results","question","correctAnswers","correct_answer","allAnswersTotal","incorrect_answers","all5050Answers","questions1","questions2","questions3","questions5050_1","questions5050_2","questions5050_3","finalAnswer","chitChat1","chitChat2","chitChat3","correctCongrats","moneyStages","console","log","onError","playMillionaire","hist","competitionQuestion","uncertainAnswer","choose","always","prompt1","prompt2","prompt3","check","Number","makeSure","fiftyFifty","goBack","reducedQuestion1","reducedQuestion2","reducedQuestion3","switchQuestion","changeQuestion","goodJob","youFailed","extraQuestion","chitChat","leave","checkMoney","checkQuestions","cancel","REGION","inspect","url","iframe","machine","Machine","dm","asrtts","audioCtx","_ctx","window","AudioContext","webkitAudioContext","navigator","mediaDevices","getUserMedia","audio","stream","createMediaStreamSource","getToken","_evt","getAuthorizationToken","azureAuthorizationToken","ponyfillTTS","_event","callback","_onReceive","ponyfill","createSpeechSynthesisPonyfill","audioContext","credentials","region","authorizationToken","speechSynthesis","SpeechSynthesisUtterance","tts","ttsUtterance","addEventListener","voices","getVoices","voiceRe","RegExp","process","voice","find","test","name","error","TTS_ERROR","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","SELECT","noinput","delay","tdmPassivity","STARTSPEECH","inprogress","match","pause","speaking","fail","recLogResult","logIntent","nluData","intent","ReactiveButton","props","promptText","state","tdmVisualOutputInfo","el","attribute","promptImage","circleClass","matches","className","alt","style","FigureButton","caption","alternative","imageSrc","App","useMachine","devTools","changeColour","asEffect","document","body","background","recStart","asr","start","recStop","abort","ttsStart","content","debug","onend","speak","ttsStop","ponyfillASR","SpeechRecognition","createSpeechRecognitionPonyfill","lang","continuous","interimResults","onresult","result","isFinal","transcript","confidence","current","figureButtons","tdmExpectedAlternatives","filter","o","visual_information","map","onClick","semantic_expression","method","headers","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.88c6356e.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\n\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nconst kbRequest = (text: string) =>\r\n    fetch(new Request(`https://opentdb.com/api.php?amount=15&difficulty=${text}&type=multiple`)).then(data => data.json())\r\n\r\n// this solution was adapted from https://javascript.info/task/shuffle and is an implementation of the Fisher-Yates shuffle algorithm in JS \r\nfunction scramble(array: any) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array\r\n}\r\n\r\nconst ans_grammar: { [index: string]: { confirmation?: string, negation?: string, help?: string } } = {\r\n\r\n    \"Yes.\": { confirmation: \"Yes\" },\r\n    \"Yeah.\": { confirmation: \"Yes\" },\r\n    \"Of course.\": { confirmation: \"Yes\" },\r\n    \"Exactly.\": { confirmation: \"Yes\" },\r\n    \"Yeah, exactly.\": { confirmation: \"Yes\" },\r\n    \"No.\": { negation: \"No\" },\r\n    \"Nope.\": { negation: \"No\" },\r\n    \"No way.\": { negation: \"No\" },\r\n    \"Not what I said.\": { negation: \"No\" },\r\n    \"Help.\": { help: \"Help\" },\r\n    \"Help me.\": { help: \"Help\" },\r\n    \"I don't know what to do.\": { help: \"Help\" },\r\n    \"I don't know what to say.\": { help: \"Help\" }\r\n}\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'idle',\r\n    states: {\r\n        idle: {\r\n            on: {\r\n                CLICK: 'init'\r\n            }\r\n        },\r\n        init: {\r\n            on: {\r\n                TTS_READY: 'askForName',\r\n                CLICK: 'askForName'\r\n            }\r\n        },\r\n\r\n        getHelp: {\r\n            initial: 'explain',\r\n            states: {\r\n                explain: {\r\n                    entry: say(`The goal of the game is to answer 12 questions correctly. Answering each question increases your reward. You can choose to walk away with your winnings after answering a question correctly.\r\n                                Answering a question incorrectly means you will only receive money from safety steps: $1000 at question 2 and $50000 at question 7. To help you you have 2 lifelines. The lifelines include\r\n                                fifty-fifty, which will remove two of the incorrect answers and switch the question, which will change the question altogether. You can fifty-fifty a switched question, but you cannot switch a\r\n                                question you used fifty-fifty on.\r\n                                You can answer the questions by saying answer 1 or first answer, answer 2 or second answer, etc. It is important that you include the number so that it is easy for the system to understand.\r\n                                You can ask to use lifelines by saying the name of the lifeline. You can ask for the question to be repeated by saying repeat. Between the questions you can quit the game by saying quit. You can\r\n                                walk away with your winnings by saying walk away. You can inquire about the current question number by asking \"how much money do I have?\", and you can also ask \"how many questions are left?\".\r\n                                Make sure to speak clearly and in phrases that the game can understand.`),\r\n                    on: { ENDSPEECH: '#root.dm.playMillionaire.hist' },\r\n                }\r\n            }\r\n        },\r\n\r\n        askForName: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: '#root.dm.init',\r\n                        cond: (context) => context.recResult[0].utterance.indexOf(\"quit\") !== -1 || context.recResult[0].utterance.indexOf(\"Quit\") !== -1\r\n                    },\r\n                    {\r\n                        target: 'greet',\r\n                        actions: assign({ username: (context) => context.recResult[0].utterance })\r\n                    },\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Welcome to Who Wants to be a Millionaire! Let's meet our first contestant. Please tell us, what's your name?\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                },\r\n                ask: {\r\n                    entry: send('LISTEN'),\r\n                }\r\n            }\r\n        },\r\n\r\n        greet: {\r\n            entry: send((context) => ({\r\n                type: 'SPEAK',\r\n                value: `Welcome, nice to meet you, ${context.username}.`\r\n            })),\r\n            on: { ENDSPEECH: 'smallTalkHome' }\r\n        },\r\n\r\n        smallTalkHome: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'explaining',\r\n                        cond: (context) => context.recResult[0].utterance.indexOf(\"skip\") !== -1 || context.recResult[0].utterance.indexOf(\"Skip\") !== -1,\r\n                    },\r\n                    {\r\n                        target: '#root.dm.init',\r\n                        cond: (context) => context.recResult[0].utterance.indexOf(\"quit\") !== -1 || context.recResult[0].utterance.indexOf(\"Quit\") !== -1\r\n                    },\r\n                    {\r\n                        target: 'smallTalkJob',\r\n                    }\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Where are you from?\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                },\r\n                ask: {\r\n                    entry: send('LISTEN'),\r\n                }\r\n            }\r\n        },\r\n\r\n        smallTalkJob: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'explaining',\r\n                        cond: (context) => context.recResult[0].utterance.indexOf(\"skip\") !== -1 || context.recResult[0].utterance.indexOf(\"Skip\") !== -1,\r\n                    },\r\n                    {\r\n                        target: '#root.dm.init',\r\n                        cond: (context) => context.recResult[0].utterance.indexOf(\"quit\") !== -1 || context.recResult[0].utterance.indexOf(\"Quit\") !== -1\r\n                    },\r\n                    {\r\n                        target: 'approveOf',\r\n                    }\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Sounds awesome! Tell us what you do for a living.\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                },\r\n                ask: {\r\n                    entry: send('LISTEN'),\r\n                }\r\n            }\r\n        },\r\n\r\n        approveOf: {\r\n            entry: send((context) => ({\r\n                type: 'SPEAK',\r\n                value: `That sounds really exciting! But enough talk, let's move on.`\r\n            })),\r\n            on: { ENDSPEECH: 'explaining' }\r\n        },\r\n\r\n        explaining: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'explainRules',\r\n                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                    },\r\n                    {\r\n                        target: 'selectDifficulty',\r\n                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                    },\r\n                    {\r\n                        target: '#root.dm.init',\r\n                        cond: (context) => context.recResult[0].utterance.indexOf(\"quit\") !== -1 || context.recResult[0].utterance.indexOf(\"Quit\") !== -1\r\n                    },\r\n                    {\r\n                        target: '.nomatch',\r\n                    }\r\n                ],\r\n                TIMEOUT: { target: '.prompt' }\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: 'SPEAK',\r\n                        value: `Would you like me to explain the rules for you?`\r\n                    })),\r\n                    on: {\r\n                        ENDSPEECH: 'ask'\r\n                    }\r\n                },\r\n                ask: {\r\n                    entry: send('LISTEN'),\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I did not get that.\"),\r\n                    on: { ENDSPEECH: 'prompt' }\r\n                },\r\n            },\r\n        },\r\n\r\n        explainRules: {\r\n            entry: say(`The goal of the game is to answer 12 questions correctly. Answering each question increases your reward. You can choose to walk away with your winnings after answering a question correctly.\r\n                                Answering a question incorrectly means you will only receive money from safety steps: $1000 at question 2 and $50000 at question 7. To help you you have 2 lifelines. The lifelines include\r\n                                fifty-fifty, which will remove two of the incorrect answers and switch the question, which will change the question altogether. You can fifty-fifty a switched question, but you cannot switch a\r\n                                question you used fifty-fifty on.\r\n                                You can answer the questions by saying answer 1 or first answer, answer 2 or second answer, etc. It is important that you include the number so that it is easy for the system to understand.\r\n                                You can ask to use lifelines by saying the name of the lifeline. You can ask for the question to be repeated by saying repeat. Between the questions you can quit the game by saying quit. You can\r\n                                walk away with your winnings by saying walk away. You can inquire about the current question number by asking \"how much money do I have?\", and you can also ask \"how many questions are left?\".\r\n                                Make sure to speak clearly and in phrases that the game can understand.`),\r\n            on: { ENDSPEECH: 'selectDifficulty' }\r\n        },\r\n\r\n        selectDifficulty: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'fetchQuestions',\r\n                        cond: (context) => context.recResult[0].utterance.indexOf(\"easy\") !== -1 || context.recResult[0].utterance.indexOf(\"Easy\") !== -1,\r\n                        actions: assign({ difficulty: (context) => 'easy' })\r\n                    },\r\n                    {\r\n                        target: 'fetchQuestions',\r\n                        cond: (context) => context.recResult[0].utterance.indexOf(\"medium\") !== -1 || context.recResult[0].utterance.indexOf(\"Medium\") !== -1,\r\n                        actions: assign({ difficulty: (context) => 'medium' })\r\n                    },\r\n                    {\r\n                        target: 'fetchQuestions',\r\n                        cond: (context) => context.recResult[0].utterance.indexOf(\"hard\") !== -1 || context.recResult[0].utterance.indexOf(\"Hard\") !== -1,\r\n                        actions: assign({ difficulty: (context) => 'hard' })\r\n                    },\r\n                    {\r\n                        target: '#root.dm.init',\r\n                        cond: (context) => context.recResult[0].utterance.indexOf(\"quit\") !== -1 || context.recResult[0].utterance.indexOf(\"Quit\") !== -1\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: 'SPEAK',\r\n                        value: `What difficulty would you like to play on, ${context.username}?`\r\n                    })),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                },\r\n                ask: {\r\n                    entry: send('LISTEN'),\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I did not get what you said. Could you repeat?\"),\r\n                    on: { ENDSPEECH: 'ask' } \r\n                },\r\n            }\r\n        },\r\n\r\n        fetchQuestions: {\r\n            invoke: {\r\n                id: 'getInfo',\r\n                src: (context, event) => kbRequest(context.difficulty), \r\n                onDone: {\r\n                    target: 'playMillionaire',\r\n                    actions: [\r\n                        assign({ safePoint: (context) => '$0' }),\r\n                        assign({ currentMoney: (context) => '$0' }),\r\n                        assign({ remainingQuestions: (context) => 12 }),\r\n                        assign({ currentQuestion: (context) => 0 }),\r\n                        assign({ counter: (context) => 0 }),\r\n                        assign({ fiftyFiftyCounter: (context) => 0 }),\r\n                        assign({ switchCounter: (context) => 0 }),\r\n\r\n                        assign({\r\n                            questionsList: (context, event) => [\r\n                                event.data.results[0].question, event.data.results[1].question, event.data.results[2].question, event.data.results[3].question, event.data.results[4].question, event.data.results[5].question,\r\n                                event.data.results[6].question, event.data.results[7].question, event.data.results[8].question, event.data.results[9].question, event.data.results[10].question, event.data.results[11].question,\r\n                                event.data.results[12].question\r\n                            ]\r\n                        }),\r\n                        assign({\r\n                            correctAnswers: (context, event) => [\r\n                                event.data.results[0].correct_answer, event.data.results[1].correct_answer, event.data.results[2].correct_answer, event.data.results[3].correct_answer, event.data.results[4].correct_answer,\r\n                                event.data.results[5].correct_answer, event.data.results[6].correct_answer, event.data.results[7].correct_answer, event.data.results[8].correct_answer, event.data.results[9].correct_answer,\r\n                                event.data.results[10].correct_answer, event.data.results[11].correct_answer, event.data.results[12].correct_answer\r\n                            ]\r\n                        }),\r\n                        assign({\r\n                            allAnswersTotal: (context, event) => [\r\n                                scramble([event.data.results[0].correct_answer, event.data.results[0].incorrect_answers[0], event.data.results[0].incorrect_answers[1], event.data.results[0].incorrect_answers[2]]),\r\n                                scramble([event.data.results[1].correct_answer, event.data.results[1].incorrect_answers[0], event.data.results[1].incorrect_answers[1], event.data.results[1].incorrect_answers[2]]),\r\n                                scramble([event.data.results[2].correct_answer, event.data.results[2].incorrect_answers[0], event.data.results[2].incorrect_answers[1], event.data.results[2].incorrect_answers[2]]),\r\n                                scramble([event.data.results[3].correct_answer, event.data.results[3].incorrect_answers[0], event.data.results[3].incorrect_answers[1], event.data.results[3].incorrect_answers[2]]),\r\n                                scramble([event.data.results[4].correct_answer, event.data.results[4].incorrect_answers[0], event.data.results[4].incorrect_answers[1], event.data.results[4].incorrect_answers[2]]),\r\n                                scramble([event.data.results[5].correct_answer, event.data.results[5].incorrect_answers[0], event.data.results[5].incorrect_answers[1], event.data.results[5].incorrect_answers[2]]),\r\n                                scramble([event.data.results[6].correct_answer, event.data.results[6].incorrect_answers[0], event.data.results[6].incorrect_answers[1], event.data.results[6].incorrect_answers[2]]),\r\n                                scramble([event.data.results[7].correct_answer, event.data.results[7].incorrect_answers[0], event.data.results[7].incorrect_answers[1], event.data.results[7].incorrect_answers[2]]),\r\n                                scramble([event.data.results[8].correct_answer, event.data.results[8].incorrect_answers[0], event.data.results[8].incorrect_answers[1], event.data.results[8].incorrect_answers[2]]),\r\n                                scramble([event.data.results[9].correct_answer, event.data.results[9].incorrect_answers[0], event.data.results[9].incorrect_answers[1], event.data.results[9].incorrect_answers[2]]),\r\n                                scramble([event.data.results[10].correct_answer, event.data.results[10].incorrect_answers[0], event.data.results[10].incorrect_answers[1], event.data.results[10].incorrect_answers[2]]),\r\n                                scramble([event.data.results[11].correct_answer, event.data.results[11].incorrect_answers[0], event.data.results[11].incorrect_answers[1], event.data.results[11].incorrect_answers[2]]),\r\n                                scramble([event.data.results[12].correct_answer, event.data.results[12].incorrect_answers[0], event.data.results[12].incorrect_answers[1], event.data.results[12].incorrect_answers[2]]),\r\n                            ]\r\n                        }),\r\n                        assign({\r\n                            all5050Answers: (context, event) => [\r\n                                scramble([event.data.results[0].correct_answer, event.data.results[0].incorrect_answers[0]]),\r\n                                scramble([event.data.results[1].correct_answer, event.data.results[1].incorrect_answers[0]]),\r\n                                scramble([event.data.results[2].correct_answer, event.data.results[2].incorrect_answers[0]]),\r\n                                scramble([event.data.results[3].correct_answer, event.data.results[3].incorrect_answers[0]]),\r\n                                scramble([event.data.results[4].correct_answer, event.data.results[4].incorrect_answers[0]]),\r\n                                scramble([event.data.results[5].correct_answer, event.data.results[5].incorrect_answers[0]]),\r\n                                scramble([event.data.results[6].correct_answer, event.data.results[6].incorrect_answers[0]]),\r\n                                scramble([event.data.results[7].correct_answer, event.data.results[7].incorrect_answers[0]]),\r\n                                scramble([event.data.results[8].correct_answer, event.data.results[8].incorrect_answers[0]]),\r\n                                scramble([event.data.results[9].correct_answer, event.data.results[9].incorrect_answers[0]]),\r\n                                scramble([event.data.results[10].correct_answer, event.data.results[10].incorrect_answers[0]]),\r\n                                scramble([event.data.results[11].correct_answer, event.data.results[11].incorrect_answers[0]]),\r\n                                scramble([event.data.results[12].correct_answer, event.data.results[12].incorrect_answers[0]]),\r\n                            ]\r\n                        }),\r\n\r\n                        assign({\r\n                            questions1: (context, event) => [\r\n                                `Okay, your first question is: ${context.questionsList[0]} The possible answers are: 1, ${context.allAnswersTotal[0][0]}, 2, ${context.allAnswersTotal[0][1]}, 3, ${context.allAnswersTotal[0][2]}, 4, ${context.allAnswersTotal[0][3]}.`,  //1st\r\n                                `Now, the second question is: ${context.questionsList[1]} The answers are: 1, ${context.allAnswersTotal[1][0]}, 2, ${context.allAnswersTotal[1][1]}, 3, ${context.allAnswersTotal[1][2]}, 4, ${context.allAnswersTotal[1][3]}.`,  //2nd\r\n                                `For the next question: ${context.questionsList[2]} The possible answers are: 1, ${context.allAnswersTotal[2][0]}, 2, ${context.allAnswersTotal[2][1]}, 3, ${context.allAnswersTotal[2][2]}, 4, ${context.allAnswersTotal[2][3]}.`,  //3rd\r\n                                `Your next question is the following: ${context.questionsList[3]} You can choose from these answers: 1, ${context.allAnswersTotal[3][0]}, 2, ${context.allAnswersTotal[3][1]}, 3, ${context.allAnswersTotal[3][2]}, 4, ${context.allAnswersTotal[3][3]}.`,  //4th\r\n                                `Your fifth question is: ${context.questionsList[4]} You have the following possible answers: 1, ${context.allAnswersTotal[4][0]}, 2, ${context.allAnswersTotal[4][1]}, 3, ${context.allAnswersTotal[4][2]}, 4, ${context.allAnswersTotal[4][3]}.`,  //5th\r\n                                `Now, the next question is: ${context.questionsList[5]} The answers are: 1, ${context.allAnswersTotal[5][0]}, 2, ${context.allAnswersTotal[5][1]}, 3, ${context.allAnswersTotal[5][2]}, 4, ${context.allAnswersTotal[5][3]}.`,  //6th\r\n                                `This is what we have for the next question: ${context.questionsList[6]} You can answer: 1, ${context.allAnswersTotal[6][0]}, 2, ${context.allAnswersTotal[6][1]}, 3, ${context.allAnswersTotal[6][2]}, 4, ${context.allAnswersTotal[6][3]}.`,  //7th\r\n                                `The eight question is: ${context.questionsList[7]} The possible answers are: 1, ${context.allAnswersTotal[7][0]}, 2, ${context.allAnswersTotal[7][1]}, 3, ${context.allAnswersTotal[7][2]}, 4, ${context.allAnswersTotal[7][3]}.`,  //8th\r\n                                `You're going strong! Up next: ${context.questionsList[8]} Choose from the following answers: 1, ${context.allAnswersTotal[8][0]}, 2, ${context.allAnswersTotal[8][1]}, 3, ${context.allAnswersTotal[8][2]}, 4, ${context.allAnswersTotal[8][3]}.`,  //9th\r\n                                `Okay, your tenth question is: ${context.questionsList[9]} The answers are: 1, ${context.allAnswersTotal[9][0]}, 2, ${context.allAnswersTotal[9][1]}, 3, ${context.allAnswersTotal[9][2]}, 4, ${context.allAnswersTotal[9][3]}.`,  //10th\r\n                                `Now, your penultimate question is: ${context.questionsList[10]} You have the following possible answers: 1, ${context.allAnswersTotal[10][0]}, 2, ${context.allAnswersTotal[10][1]}, 3, ${context.allAnswersTotal[10][2]}, 4, ${context.allAnswersTotal[10][3]}.`,  //11th\r\n                                `Your final question is: ${context.questionsList[11]} Choose from the following: 1, ${context.allAnswersTotal[11][0]}, 2, ${context.allAnswersTotal[11][1]}, 3, ${context.allAnswersTotal[11][2]}, 4, ${context.allAnswersTotal[11][3]}.`,  //12th\r\n                                `Your backup question is: ${context.questionsList[12]} The answers are: 1, ${context.allAnswersTotal[12][0]}, 2, ${context.allAnswersTotal[12][1]}, 3, ${context.allAnswersTotal[12][2]}, 4, ${context.allAnswersTotal[12][3]}.`,  //13th\r\n                            ]\r\n                        }),\r\n                        assign({\r\n                            questions2: (context, event) => [\r\n                                `Let me repeat: ${context.questionsList[0]} The answers are: 1, ${context.allAnswersTotal[0][0]}, 2, ${context.allAnswersTotal[0][1]}, 3, ${context.allAnswersTotal[0][2]}, 4, ${context.allAnswersTotal[0][3]}.`,  //1st\r\n                                `Let me repeat your question: ${context.questionsList[1]} You have the following possible answers: 1, ${context.allAnswersTotal[1][0]}, 2, ${context.allAnswersTotal[1][1]}, 3, ${context.allAnswersTotal[1][2]}, 4, ${context.allAnswersTotal[1][3]}.`,  //2nd\r\n                                `I will say it again: ${context.questionsList[2]} Choose from the following answers: 1, ${context.allAnswersTotal[2][0]}, 2, ${context.allAnswersTotal[2][1]}, 3, ${context.allAnswersTotal[2][2]}, 4, ${context.allAnswersTotal[2][3]}.`,  //3rd\r\n                                `Let me repeat:  ${context.questionsList[3]} The possible answers are: 1, ${context.allAnswersTotal[3][0]}, 2, ${context.allAnswersTotal[3][1]}, 3, ${context.allAnswersTotal[3][2]}, 4, ${context.allAnswersTotal[3][3]}.`,  //4th\r\n                                `I will say it again: ${context.questionsList[4]} The answers are: 1, ${context.allAnswersTotal[4][0]}, 2, ${context.allAnswersTotal[4][1]}, 3, ${context.allAnswersTotal[4][2]}, 4, ${context.allAnswersTotal[4][3]}.`,  //5th\r\n                                `Let me repeat your question: ${context.questionsList[5]} Choose from the following answers: 1, ${context.allAnswersTotal[5][0]}, 2, ${context.allAnswersTotal[5][1]}, 3, ${context.allAnswersTotal[5][2]}, 4, ${context.allAnswersTotal[5][3]}.`,  //6th\r\n                                `I will say it again: ${context.questionsList[6]} The possible answers are: 1, ${context.allAnswersTotal[6][0]}, 2, ${context.allAnswersTotal[6][1]}, 3, ${context.allAnswersTotal[6][2]}, 4, ${context.allAnswersTotal[6][3]}.`,  //7th\r\n                                `I will read again: ${context.questionsList[7]} The answers are: 1, ${context.allAnswersTotal[7][0]}, 2, ${context.allAnswersTotal[7][1]}, 3, ${context.allAnswersTotal[7][2]}, 4, ${context.allAnswersTotal[7][3]}.`,  //8th\r\n                                `I will say it again: ${context.questionsList[8]} The possible answers are: 1, ${context.allAnswersTotal[8][0]}, 2, ${context.allAnswersTotal[8][1]}, 3, ${context.allAnswersTotal[8][2]}, 4, ${context.allAnswersTotal[8][3]}.`,  //9th\r\n                                `Let me repeat:  ${context.questionsList[9]} Choose from the following answers: 1, ${context.allAnswersTotal[9][0]}, 2, ${context.allAnswersTotal[9][1]}, 3, ${context.allAnswersTotal[9][2]}, 4, ${context.allAnswersTotal[9][3]}.`,  //10th\r\n                                `I will read it again: ${context.questionsList[10]} The answers are: 1, ${context.allAnswersTotal[10][0]}, 2, ${context.allAnswersTotal[10][1]}, 3, ${context.allAnswersTotal[10][2]}, 4, ${context.allAnswersTotal[10][3]}.`,  //11th\r\n                                `Let me repeat your final question:  ${context.questionsList[11]} You have the following possible answers: 1, ${context.allAnswersTotal[11][0]}, 2, ${context.allAnswersTotal[11][1]}, 3, ${context.allAnswersTotal[11][2]}, 4, ${context.allAnswersTotal[11][3]}.`,  //12th\r\n                                `Let me repeat your backup question:  ${context.questionsList[12]} The possible answers are: 1, ${context.allAnswersTotal[12][0]}, 2, ${context.allAnswersTotal[12][1]}, 3, ${context.allAnswersTotal[12][2]}, 4, ${context.allAnswersTotal[12][3]}.`,  //13th\r\n                            ]\r\n                        }),\r\n                        assign({\r\n                            questions3: (context, event) => [\r\n                                `I will say it one last time: ${context.questionsList[0]} The possible answers are: 1, ${context.allAnswersTotal[0][0]}, 2, ${context.allAnswersTotal[0][1]}, 3, ${context.allAnswersTotal[0][2]}, 4, ${context.allAnswersTotal[0][3]}.`,  //1st\r\n                                `I will repeat it one last time: ${context.questionsList[1]} The answers are: 1, ${context.allAnswersTotal[1][0]}, 2, ${context.allAnswersTotal[1][1]}, 3, ${context.allAnswersTotal[1][2]}, 4, ${context.allAnswersTotal[1][3]}.`,  //2nd\r\n                                `I will say it one last time: ${context.questionsList[2]} Choose from the following answers: 1, ${context.allAnswersTotal[2][0]}, 2, ${context.allAnswersTotal[2][1]}, 3, ${context.allAnswersTotal[2][2]}, 4, ${context.allAnswersTotal[2][3]}.`,  //3rd\r\n                                `For the last time: ${context.questionsList[3]} The possible answers are: 1, ${context.allAnswersTotal[3][0]}, 2, ${context.allAnswersTotal[3][1]}, 3, ${context.allAnswersTotal[3][2]}, 4, ${context.allAnswersTotal[3][3]}.`,  //4th\r\n                                `I will read it one last time: ${context.questionsList[4]} You can choose from these answers: 1, ${context.allAnswersTotal[4][0]}, 2, ${context.allAnswersTotal[4][1]}, 3, ${context.allAnswersTotal[4][2]}, 4, ${context.allAnswersTotal[4][3]}.`,  //5th\r\n                                `I will repeat the question one last time: ${context.questionsList[5]} The possible answers are: 1, ${context.allAnswersTotal[5][0]}, 2, ${context.allAnswersTotal[5][1]}, 3, ${context.allAnswersTotal[5][2]}, 4, ${context.allAnswersTotal[5][3]}.`,  //6th\r\n                                `I will say it one last time: ${context.questionsList[6]} The answers are: 1, ${context.allAnswersTotal[6][0]}, 2, ${context.allAnswersTotal[6][1]}, 3, ${context.allAnswersTotal[6][2]}, 4, ${context.allAnswersTotal[6][3]}.`,  //7th\r\n                                `I will read it one last time: ${context.questionsList[7]} Choose from the following answers: 1, ${context.allAnswersTotal[7][0]}, 2, ${context.allAnswersTotal[7][1]}, 3, ${context.allAnswersTotal[7][2]}, 4, ${context.allAnswersTotal[7][3]}.`,  //8th\r\n                                `I will say the question one last time: ${context.questionsList[8]} The possible answers are: 1, ${context.allAnswersTotal[8][0]}, 2, ${context.allAnswersTotal[8][1]}, 3, ${context.allAnswersTotal[8][2]}, 4, ${context.allAnswersTotal[8][3]}.`,  //9th\r\n                                `I will repeat it one last time: ${context.questionsList[9]} Choose from the following answers: 1, ${context.allAnswersTotal[9][0]}, 2, ${context.allAnswersTotal[9][1]}, 3, ${context.allAnswersTotal[9][2]}, 4, ${context.allAnswersTotal[9][3]}.`,  //10th\r\n                                `For the last time: ${context.questionsList[10]} The answers are: 1, ${context.allAnswersTotal[10][0]}, 2, ${context.allAnswersTotal[10][1]}, 3, ${context.allAnswersTotal[10][2]}, 4, ${context.allAnswersTotal[10][3]}.`,  //11th\r\n                                `I will read it one last time: ${context.questionsList[11]} You can choose from these answers: 1, ${context.allAnswersTotal[11][0]}, 2, ${context.allAnswersTotal[11][1]}, 3, ${context.allAnswersTotal[11][2]}, 4, ${context.allAnswersTotal[11][3]}.`,  //12th\r\n                                `I will say your backup question one last time: ${context.questionsList[12]} The possible answers are: 1, ${context.allAnswersTotal[12][0]}, 2, ${context.allAnswersTotal[12][1]}, 3, ${context.allAnswersTotal[12][2]}, 4, ${context.allAnswersTotal[12][3]}.`,  //13th\r\n                            ]\r\n                        }),\r\n\r\n                        assign({\r\n                            questions5050_1: (context, event) => [\r\n                                `After removing two incorrect answers the question is: ${context.questionsList[0]} The possible answers are: 1, ${context.all5050Answers[0][0]}, 2, ${context.all5050Answers[0][1]}.`,  //1st\r\n                                `After removing two incorrect answers the question is: ${context.questionsList[1]} The answers are: 1, ${context.all5050Answers[1][0]}, 2, ${context.all5050Answers[1][1]}.`,  //2nd\r\n                                `After removing two incorrect answers the question is: ${context.questionsList[2]} Choose from the following answers: 1, ${context.all5050Answers[2][0]}, 2, ${context.all5050Answers[2][1]}.`,  //3rd\r\n                                `After removing two incorrect answers the question is: ${context.questionsList[3]} The possible answers are: 1, ${context.all5050Answers[3][0]}, 2, ${context.all5050Answers[3][1]}.`,  //4th\r\n                                `After removing two incorrect answers the question is: ${context.questionsList[4]} You can choose from these answers: 1, ${context.all5050Answers[4][0]}, 2, ${context.all5050Answers[4][1]}.`,  //5th\r\n                                `After removing two incorrect answers the question is: ${context.questionsList[5]} The possible answers are: 1, ${context.all5050Answers[5][0]}, 2, ${context.all5050Answers[5][1]}.`,  //6th\r\n                                `After removing two incorrect answers the question is: ${context.questionsList[6]} The answers are: 1, ${context.all5050Answers[6][0]}, 2, ${context.all5050Answers[6][1]}.`,  //7th\r\n                                `After removing two incorrect answers the question is: ${context.questionsList[7]} Choose from the following answers: 1, ${context.all5050Answers[7][0]}, 2, ${context.all5050Answers[7][1]}.`,  //8th\r\n                                `After removing two incorrect answers the question is: ${context.questionsList[8]} The possible answers are: 1, ${context.all5050Answers[8][0]}, 2, ${context.all5050Answers[8][1]}.`,  //9th\r\n                                `After removing two incorrect answers the question is: ${context.questionsList[9]} Choose from the following answers: 1, ${context.all5050Answers[9][0]}, 2, ${context.all5050Answers[9][1]}.`,  //10th\r\n                                `After removing two incorrect answers the question is: ${context.questionsList[10]} The answers are: 1, ${context.all5050Answers[10][0]}, 2, ${context.all5050Answers[10][1]}.`,  //11th\r\n                                `After removing two incorrect answers the question is: ${context.questionsList[11]} You can choose from these answers: 1, ${context.all5050Answers[11][0]}, 2, ${context.all5050Answers[11][1]}.`,  //12th\r\n                                `After removing two incorrect answers your backup question is: ${context.questionsList[12]} The possible answers are: 1, ${context.all5050Answers[12][0]}, 2, ${context.all5050Answers[12][1]}.`,  //13th\r\n                            ]\r\n                        }),\r\n                        assign({\r\n                            questions5050_2: (context, event) => [\r\n                                `Let me reiterate it: ${context.questionsList[0]} The possible answers are: 1, ${context.all5050Answers[0][0]}, 2, ${context.all5050Answers[0][1]}.`,  //1st\r\n                                `I will say it one more time: ${context.questionsList[1]} The answers are: 1, ${context.all5050Answers[1][0]}, 2, ${context.all5050Answers[1][1]}.`,  //2nd\r\n                                `I will repeat once more: ${context.questionsList[2]} Choose from the following answers: 1, ${context.all5050Answers[2][0]}, 2, ${context.all5050Answers[2][1]}.`,  //3rd\r\n                                `I will say it one more time: ${context.questionsList[3]} The possible answers are: 1, ${context.all5050Answers[3][0]}, 2, ${context.all5050Answers[3][1]}.`,  //4th\r\n                                `Once again: ${context.questionsList[4]} You can choose from these answers: 1, ${context.all5050Answers[4][0]}, 2, ${context.all5050Answers[4][1]}.`,  //5th\r\n                                `Let me reiterate it:: ${context.questionsList[5]} The possible answers are: 1, ${context.all5050Answers[5][0]}, 2, ${context.all5050Answers[5][1]}.`,  //6th\r\n                                `Let me repeat the question: ${context.questionsList[6]} The answers are: 1, ${context.all5050Answers[6][0]}, 2, ${context.all5050Answers[6][1]}.`,  //7th\r\n                                `Let me reiterate it: ${context.questionsList[7]} Choose from the following answers: 1, ${context.all5050Answers[7][0]}, 2, ${context.all5050Answers[7][1]}.`,  //8th\r\n                                `I will say it one more time ${context.questionsList[8]} The possible answers are: 1, ${context.all5050Answers[8][0]}, 2, ${context.all5050Answers[8][1]}.`,  //9th\r\n                                `I will say the question one more time: ${context.questionsList[9]} Choose from the following answers: 1, ${context.all5050Answers[9][0]}, 2, ${context.all5050Answers[9][1]}.`,  //10th\r\n                                `I will repeat it once again: ${context.questionsList[10]} The answers are: 1, ${context.all5050Answers[10][0]}, 2, ${context.all5050Answers[10][1]}.`,  //11th\r\n                                `I will read it out once more: ${context.questionsList[11]} You can choose from these answers: 1, ${context.all5050Answers[11][0]}, 2, ${context.all5050Answers[11][1]}.`,  //12th\r\n                                `I will say your backup question again: ${context.questionsList[12]} The possible answers are: 1, ${context.all5050Answers[12][0]}, 2, ${context.all5050Answers[12][1]}.`,  //13th\r\n                            ]\r\n                        }),\r\n                        assign({\r\n                            questions5050_3: (context, event) => [\r\n                                `I will read it one last time: ${context.questionsList[0]} The possible answers are: 1, ${context.all5050Answers[0][0]}, 2, ${context.all5050Answers[0][1]}.`,  //1st\r\n                                `I will say it one last time: ${context.questionsList[1]} The answers are: 1, ${context.all5050Answers[1][0]}, 2, ${context.all5050Answers[1][1]}.`,  //2nd\r\n                                `I will repeat it one last time: ${context.questionsList[2]} Choose from the following answers: 1, ${context.all5050Answers[2][0]}, 2, ${context.all5050Answers[2][1]}.`,  //3rd\r\n                                `I will say it one last time: ${context.questionsList[3]} The possible answers are: 1, ${context.all5050Answers[3][0]}, 2, ${context.all5050Answers[3][1]}.`,  //4th\r\n                                `For the last time: ${context.questionsList[4]} You can choose from these answers: 1, ${context.all5050Answers[4][0]}, 2, ${context.all5050Answers[4][1]}.`,  //5th\r\n                                `I will read it one last time: ${context.questionsList[5]} The possible answers are: 1, ${context.all5050Answers[5][0]}, 2, ${context.all5050Answers[5][1]}.`,  //6th\r\n                                `I will repeat the question one last time: ${context.questionsList[6]} The answers are: 1, ${context.all5050Answers[6][0]}, 2, ${context.all5050Answers[6][1]}.`,  //7th\r\n                                `I will say it one last time: ${context.questionsList[7]} Choose from the following answers: 1, ${context.all5050Answers[7][0]}, 2, ${context.all5050Answers[7][1]}.`,  //8th\r\n                                `I will read it one last time: ${context.questionsList[8]} The possible answers are: 1, ${context.all5050Answers[8][0]}, 2, ${context.all5050Answers[8][1]}.`,  //9th\r\n                                `I will say the question one last time: ${context.questionsList[9]} Choose from the following answers: 1, ${context.all5050Answers[9][0]}, 2, ${context.all5050Answers[9][1]}.`,  //10th\r\n                                `I will repeat it one last time: ${context.questionsList[10]} The answers are: 1, ${context.all5050Answers[10][0]}, 2, ${context.all5050Answers[10][1]}.`,  //11th\r\n                                `I will read it one last time: ${context.questionsList[11]} You can choose from these answers: 1, ${context.all5050Answers[11][0]}, 2, ${context.all5050Answers[11][1]}.`,  //12th\r\n                                `I will say your backup question one last time: ${context.questionsList[12]} The possible answers are: 1, ${context.all5050Answers[12][0]}, 2, ${context.all5050Answers[12][1]}.`,  //13th\r\n                            ]\r\n                        }),\r\n\r\n                        assign({\r\n                            finalAnswer: (context, event) => [\r\n                                `Is that your final answer?`,  //1st\r\n                                `Are you sure it's that, ${context.username}?`,  //2nd\r\n                                `Are you sure that is the correct answer?`,  //3rd\r\n                                `Is that your final answer?`,  //4th\r\n                                `Are you 100% sure about that, ${context.username}?`,  //5th\r\n                                `So is that your final answer?`,  //6th\r\n                                `Is that your final answer?`,  //7th\r\n                                `${context.username}, are you sure it's that?`,  //8th\r\n                                `Are you sure that is the correct answer?`,  //9th\r\n                                `Is that your final answer?`,  //10th\r\n                                `Are you 100% sure about that?`,  //11th\r\n                                `So is that your final answer?`,  //12th\r\n                                `Is that your final answer?`,  //13th\r\n                            ]\r\n                        }),\r\n\r\n                        assign({\r\n                            chitChat1: (context, event) => [\r\n                                `Okay, are you ready to continue, ${context.username}?`,  //1st\r\n                                `Okay, do you want to continue?`,  //2nd\r\n                                `Ready to continue?`,  //3rd\r\n                                `Okay, are you ready to continue?`,  //4th\r\n                                `Okay, do you want to continue?`,  //5th\r\n                                `Ready to continue, ${context.username}??`,  //6th\r\n                                `Shall we continue?`,  //7th\r\n                                `Okay, do you want to continue?`,  //8th\r\n                                `Are you ready to continue?`,  //9th\r\n                                `Up for the next question?`,  //10th\r\n                                `${context.username}?, shall we continue?`,  //11th\r\n                                `Are you ready to continue?`,  //12th\r\n                                `Ready to continue?`,  //13th\r\n                            ]\r\n                        }),\r\n                        assign({\r\n                            chitChat2: (context, event) => [\r\n                                `Are you ready for the next question?`,  //1st\r\n                                `Are you ready to move on to the next question?`,  //2nd\r\n                                `Shall we continue to the next question, ${context.username}?`,  //3rd\r\n                                `Are you ready for the next question?`,  //4th\r\n                                `Are you ready to move on?`,  //5th\r\n                                `Are you ready?`,  //6th\r\n                                `Are you ready to continue?`,  //7th\r\n                                `Are you ready for the next question?`,  //8th\r\n                                `${context.username}, are you ready to move on?`,  //9th\r\n                                `Are you ready to continue to the next question?`,  //10th\r\n                                `Shall we move on to the next question?`,  //11th\r\n                                `Are you ready to move on to the next question?`,  //12th\r\n                                `Are you ready to move on?`,  //13th\r\n                            ]\r\n                        }),\r\n                        assign({\r\n                            chitChat3: (context, event) => [\r\n                                `Are you ready to move on to the next question?`,  //1st\r\n                                `Shall we continue to the next question, ${context.username}?`,  //2nd\r\n                                `Are you ready for the next question?`,  //3rd\r\n                                `Are you ready to move on?`,  //4th\r\n                                `Are you ready, ${context.username}?`,  //5th\r\n                                `Are you ready to continue?`,  //6th\r\n                                `Are you ready for the next question?`,  //7th\r\n                                `Are you ready to move on?`,  //8th\r\n                                `${context.username}, are you ready to continue to the next question?`,  //9th\r\n                                `Shall we move on to the next question?`,  //10th\r\n                                `Are you ready to move on to the next question?`,  //11th\r\n                                `Are you ready to move on?`,  //12th\r\n                                `Are you ready for the next question?`,  //13th\r\n                            ]\r\n                        }),\r\n\r\n                        assign({\r\n                            correctCongrats: (context, event) => [\r\n                                `Correct! That was the right answer. You just earned $500!`,  //1st\r\n                                `That was the correct answer. You just doubled your winnings!`, //2nd\r\n                                `Congrats, ${context.username}! It was the right answer. You just earned another $1000!`, //3rd\r\n                                `Awesome! It was the correct answer. You're at $5000!`, //4th\r\n                                `That was indeed the right answer. You doubled your reward!`, //5th\r\n                                `Correct! It was the answer. You just earned 10000$!`, //6th\r\n                                `Congrats! The answer was what you said. You are at $50000!`, //7th\r\n                                `Great job, ${context.username}! It was the right answer. You just earned $25000 more!`, //8th\r\n                                `Correct! That was the answer. You doubled your winnings again!`, //9th\r\n                                `Awesome! It was the right answer. You now have $250000`, //10th\r\n                                `That was the right correct answer. You doubled your potential reward!`, //11th\r\n                                `Correct! It was the right answer. Congratulations! This was your last question, which means you just won a million dollars! You are a millionaire!`, //12th\r\n                            ]\r\n                        }),\r\n\r\n                        assign({\r\n                            moneyStages: (context, event) => [\r\n                                `$500`,  //1st\r\n                                `$1000`,  //2nd\r\n                                `$2000`,  //3rd\r\n                                `$5000`,  //4th\r\n                                `$10000`,  //5th\r\n                                `$20000`,  //6th\r\n                                `$50000`,  //7th\r\n                                `$75000`,  //8th\r\n                                `$150000`,  //9th\r\n                                `$250000`,  //10th\r\n                                `$500000`,  //11th\r\n                                `$1000000`,  //12th\r\n                            ]\r\n                        }),\r\n                      \r\n                        (context, event) => console.log(context, event),\r\n                        (context, event) => console.log(event.data.results[0])\r\n\r\n                    ]\r\n                },\r\n                onError: {\r\n                    target: 'init'\r\n                }\r\n            }\r\n        },\r\n\r\n        playMillionaire: {\r\n            initial: 'competitionQuestion',\r\n            states: {\r\n                hist: {\r\n                    type: 'history'\r\n                },\r\n\r\n                competitionQuestion: {  // change\r\n                    initial: 'choose',\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: '#root.dm.getHelp',\r\n                                cond: (context) => context.recResult[0].utterance.indexOf(\"help\") !== -1 || context.recResult[0].utterance.indexOf(\"Help\") !== -1\r\n                            },\r\n                            {\r\n                                target: '#root.dm.init',\r\n                                cond: (context) => context.recResult[0].utterance.indexOf(\"quit\") !== -1 || context.recResult[0].utterance.indexOf(\"Quit\") !== -1\r\n                            },\r\n                            {\r\n                                target: '.choose',\r\n                                cond: (context) => context.recResult[0].utterance.indexOf(\"repeat\") !== -1 || context.recResult[0].utterance.indexOf(\"Repeat\") !== -1\r\n                            },\r\n                            {\r\n                                target: '.switchQuestion',\r\n                                cond: (context) => context.recResult[0].utterance.indexOf(\"switch\") !== -1 || context.recResult[0].utterance.indexOf(\"Switch\") !== -1 ||\r\n                                    context.recResult[0].utterance.indexOf(\"change\") !== -1 || context.recResult[0].utterance.indexOf(\"Change\") !== -1,\r\n                                actions: assign({ counter: (context) => 0 })\r\n                            },\r\n                            {\r\n                                target: '.fiftyFifty',\r\n                                cond: (context) => context.recResult[0].utterance.indexOf(\"fifty\") !== -1 || context.recResult[0].utterance.indexOf(\"Fifty\") !== -1 ||\r\n                                    context.recResult[0].utterance.indexOf(\"50\") !== -1 || context.recResult[0].utterance.indexOf(\"5050\") !== -1,\r\n                                actions: assign({ counter: (context) => 0 })\r\n                            },\r\n                            {\r\n                                target: '.check',\r\n                                cond: (context) => context.recResult[0].utterance.indexOf(\"first\") !== -1 || context.recResult[0].utterance.indexOf(\"one\") !== -1 || context.recResult[0].utterance.indexOf(\"1st\") !== -1 ||\r\n                                    context.recResult[0].utterance.indexOf(\"1\") !== -1 || context.recResult[0].utterance.indexOf(\"One\") !== -1 || context.recResult[0].utterance.indexOf(\"First\") !== -1,\r\n                                actions: assign({ uncertainAnswer: (context) => \"1\" })\r\n                            },\r\n                            {\r\n                                target: '.check', \r\n                                cond: (context) => context.recResult[0].utterance.indexOf(\"second\") !== -1 || context.recResult[0].utterance.indexOf(\"two\") !== -1 || context.recResult[0].utterance.indexOf(\"2nd\") !== -1 ||\r\n                                    context.recResult[0].utterance.indexOf(\"2\") !== -1 || context.recResult[0].utterance.indexOf(\"Two\") !== -1 || context.recResult[0].utterance.indexOf(\"Second\") !== -1,\r\n                                actions: assign({ uncertainAnswer: (context) => \"2\" })\r\n                            },\r\n                            {\r\n                                target: '.check', \r\n                                cond: (context) => context.recResult[0].utterance.indexOf(\"third\") !== -1 || context.recResult[0].utterance.indexOf(\"three\") !== -1 || context.recResult[0].utterance.indexOf(\"3rd\") !== -1 ||\r\n                                    context.recResult[0].utterance.indexOf(\"3\") !== -1 || context.recResult[0].utterance.indexOf(\"Three\") !== -1 || context.recResult[0].utterance.indexOf(\"Third\") !== -1,\r\n                                actions: [assign({ counter: (context) => 0 }), assign({ uncertainAnswer: (context) => \"3\" })]\r\n                            },\r\n                            {\r\n                                target: '.check',\r\n                                cond: (context) => context.recResult[0].utterance.indexOf(\"fourth\") !== -1 || context.recResult[0].utterance.indexOf(\"four\") !== -1 || context.recResult[0].utterance.indexOf(\"4th\") !== -1 ||\r\n                                    context.recResult[0].utterance.indexOf(\"4\") !== -1 || context.recResult[0].utterance.indexOf(\"Four\") !== -1 || context.recResult[0].utterance.indexOf(\"Fourth\") !== -1,\r\n                                actions: [assign({ counter: (context) => 0 }), assign({ uncertainAnswer: (context) => \"4\" })]\r\n                            },\r\n                            {\r\n                                target: '.nomatch',\r\n                                actions: assign({ counter: (context) => context.counter + 1 })\r\n                            },\r\n                        ],\r\n                        TIMEOUT: { actions: assign({ counter: (context) => context.counter + 1 }), target: '.choose' }\r\n                    },\r\n                    states: {\r\n                        choose: {\r\n                            always: [\r\n                                { target: 'prompt1', cond: (context) => context.counter === 0 },\r\n                                { target: 'prompt2', cond: (context) => context.counter === 1 },\r\n                                { target: 'prompt3', cond: (context) => context.counter === 2 },\r\n                                { target: 'youFailed', cond: (context) => context.counter === 3 },\r\n                            ]\r\n                        },\r\n                        prompt1: {\r\n                            entry: send((context) => ({ \r\n                                type: 'SPEAK', \r\n                                value: context.questions1[context.currentQuestion]\r\n                            })),\r\n                            on: {\r\n                                ENDSPEECH: 'ask'\r\n                            }\r\n                        },\r\n                        prompt2: {\r\n                            entry: send((context) => ({ \r\n                                type: 'SPEAK', \r\n                                value: context.questions2[context.currentQuestion]\r\n                            })),\r\n                            on: {\r\n                                ENDSPEECH: 'ask'\r\n                            }\r\n                        },\r\n                        prompt3: {\r\n                            entry: send((context) => ({ \r\n                                type: 'SPEAK', \r\n                                value: context.questions3[context.currentQuestion]\r\n                            })),\r\n                            on: {\r\n                                ENDSPEECH: 'ask'\r\n                            }\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN'),\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry, I did not get that.\"),\r\n                            on: { ENDSPEECH: '#root.dm.playMillionaire.competitionQuestion' } \r\n                        },\r\n                        // check if sure\r\n                        check: {\r\n                            initial: 'makeSure',\r\n                            on: {\r\n                                RECOGNISED: [\r\n                                    {\r\n                                        target: 'goodJob',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) &&\r\n                                            context.correctAnswers[context.currentQuestion] === context.allAnswersTotal[context.currentQuestion][Number(context.uncertainAnswer) - 1] &&\r\n                                            context.currentQuestion === 1, // change\r\n                                        actions: [\r\n                                            assign({ counter: (context) => 0 }), assign({ currentMoney: (context) => context.moneyStages[context.currentQuestion] }),\r\n                                            assign({ currentQuestion: (context) => context.currentQuestion + 1 }), assign({ remainingQuestions: (context) => context.remainingQuestions - 1 }),\r\n                                            assign({ safePoint: (context) => '$1000' })\r\n                                        ], // safe step\r\n                                    },\r\n                                    {\r\n                                        target: 'goodJob',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) &&\r\n                                            context.correctAnswers[context.currentQuestion] === context.allAnswersTotal[context.currentQuestion][Number(context.uncertainAnswer) - 1] &&\r\n                                            context.currentQuestion === 6, // change\r\n                                        actions: [\r\n                                            assign({ counter: (context) => 0 }), assign({ currentMoney: (context) => context.moneyStages[context.currentQuestion] }),\r\n                                            assign({ currentQuestion: (context) => context.currentQuestion + 1 }), assign({ remainingQuestions: (context) => context.remainingQuestions - 1 }),\r\n                                            assign({ safePoint: (context) => '$50000' })\r\n                                        ], // safe step\r\n                                    },\r\n                                    {\r\n                                        target: 'goodJob',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) &&\r\n                                            context.correctAnswers[context.currentQuestion] === context.allAnswersTotal[context.currentQuestion][Number(context.uncertainAnswer) - 1] &&\r\n                                            context.currentQuestion !== 1 && context.currentQuestion !== 6, // change\r\n                                        actions: [assign({ counter: (context) => 0 }), assign({ currentMoney: (context) => context.moneyStages[context.currentQuestion] }), assign({ currentQuestion: (context) => context.currentQuestion + 1 }), assign({ remainingQuestions: (context) => context.remainingQuestions - 1 })], // add safe step whenever necessary\r\n                                    },\r\n                                    {\r\n                                        target: 'youFailed',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) &&\r\n                                            context.correctAnswers[context.currentQuestion] !== context.allAnswersTotal[context.currentQuestion][Number(context.uncertainAnswer) - 1],\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.playMillionaire.competitionQuestion', // change\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                        actions: assign({ counter: (context) => context.counter + 1 }),\r\n                                    },\r\n                                    {\r\n                                        target: '.nomatch',\r\n                                    }\r\n                                ],\r\n                                TIMEOUT: { target: '.makeSure' }\r\n                            },\r\n                            states: {\r\n                                makeSure: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: context.finalAnswer[context.currentQuestion] // change\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: 'ask'\r\n                                    }\r\n                                },\r\n                                ask: {\r\n                                    entry: send('LISTEN'),\r\n                                },\r\n                                nomatch: {\r\n                                    entry: say(\"Sorry, I did not get that.\"),\r\n                                    on: { ENDSPEECH: 'makeSure' }\r\n                                },\r\n\r\n                            },\r\n                        },\r\n\r\n                        // lifelines\r\n                        // 50/50\r\n                        fiftyFifty: {\r\n                            initial: 'choose',\r\n                            on: {\r\n                                RECOGNISED: [\r\n                                    {\r\n                                        target: '#root.dm.init',\r\n                                        cond: (context) => context.recResult[0].utterance.indexOf(\"quit\") !== -1 || context.recResult[0].utterance.indexOf(\"Quit\") !== -1\r\n                                    },\r\n                                    {\r\n                                        target: '.choose',\r\n                                        cond: (context) => context.recResult[0].utterance.indexOf(\"repeat\") !== -1 || context.recResult[0].utterance.indexOf(\"Repeat\") !== -1\r\n                                    },\r\n                                    {\r\n                                        target: '.check', \r\n                                        cond: (context) => context.recResult[0].utterance.indexOf(\"first\") !== -1 || context.recResult[0].utterance.indexOf(\"one\") !== -1 || context.recResult[0].utterance.indexOf(\"1st\") !== -1 ||\r\n                                            context.recResult[0].utterance.indexOf(\"1\") !== -1 || context.recResult[0].utterance.indexOf(\"One\") !== -1 || context.recResult[0].utterance.indexOf(\"First\") !== -1,\r\n                                        actions: assign({ uncertainAnswer: (context) => \"1\" })\r\n                                    },\r\n                                    {\r\n                                        target: '.check', \r\n                                        cond: (context) => context.recResult[0].utterance.indexOf(\"second\") !== -1 || context.recResult[0].utterance.indexOf(\"two\") !== -1 || context.recResult[0].utterance.indexOf(\"2nd\") !== -1 ||\r\n                                            context.recResult[0].utterance.indexOf(\"2\") !== -1 || context.recResult[0].utterance.indexOf(\"Two\") !== -1 || context.recResult[0].utterance.indexOf(\"Second\") !== -1,\r\n                                        actions: assign({ uncertainAnswer: (context) => \"2\" })\r\n                                    },\r\n                                    {\r\n                                        target: '.nomatch',\r\n                                        actions: assign({ counter: (context) => context.counter + 1 })\r\n                                    }\r\n                                ],\r\n                                TIMEOUT: { target: '.choose', actions: assign({ counter: (context) => context.counter + 1 }) }\r\n                            },\r\n                            states: {\r\n                                choose: {\r\n                                    always: [\r\n                                        { target: 'goBack', cond: (context) => context.fiftyFiftyCounter !== 0 },\r\n                                        { target: 'reducedQuestion1', cond: (context) => context.counter === 0 && context.fiftyFiftyCounter === 0 },\r\n                                        { target: 'reducedQuestion2', cond: (context) => context.counter === 1 && context.fiftyFiftyCounter === 0 },\r\n                                        { target: 'reducedQuestion3', cond: (context) => context.counter === 2 && context.fiftyFiftyCounter === 0 },\r\n                                        { target: '#root.dm.playMillionaire.competitionQuestion.youFailed', cond: (context) => context.counter === 3 }, // change\r\n                                    ]\r\n                                },\r\n                                goBack: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: `I am sorry, but you have already used up your fifty-fifty lifeline.`\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: '#root.dm.playMillionaire.competitionQuestion' \r\n                                    }\r\n                                },\r\n                                reducedQuestion1: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: context.questions5050_1[context.currentQuestion]\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: 'ask'\r\n                                    }\r\n                                },\r\n                                reducedQuestion2: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: context.questions5050_2[context.currentQuestion]\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: 'ask'\r\n                                    }\r\n                                },\r\n                                reducedQuestion3: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: context.questions5050_3[context.currentQuestion]\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: 'ask'\r\n                                    }\r\n                                },\r\n                                ask: {\r\n                                    entry: send('LISTEN'),\r\n                                },\r\n                                nomatch: {\r\n                                    entry: say(\"Sorry, I did not get that.\"),\r\n                                    on: { ENDSPEECH: 'choose' }\r\n                                },\r\n                                check: {\r\n                                    initial: 'makeSure',\r\n                                    on: {\r\n                                        RECOGNISED: [\r\n                                            {\r\n                                                target: '#root.dm.playMillionaire.competitionQuestion.goodJob',\r\n                                                cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) &&\r\n                                                    context.correctAnswers[context.currentQuestion] === context.all5050Answers[context.currentQuestion][Number(context.uncertainAnswer) - 1] &&\r\n                                                    context.currentQuestion === 1, // change\r\n                                                actions: [\r\n                                                    assign({ counter: (context) => 0 }), assign({ currentMoney: (context) => context.moneyStages[context.currentQuestion] }),\r\n                                                    assign({ currentQuestion: (context) => context.currentQuestion + 1 }), assign({ remainingQuestions: (context) => context.remainingQuestions - 1 }),\r\n                                                    assign({ safePoint: (context) => '$1000' }),\r\n                                                    assign({ fiftyFiftyCounter: (context) => 1 })\r\n                                                ], // safe step\r\n                                            },\r\n                                            {\r\n                                                target: '#root.dm.playMillionaire.competitionQuestion.goodJob',\r\n                                                cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) &&\r\n                                                    context.correctAnswers[context.currentQuestion] === context.all5050Answers[context.currentQuestion][Number(context.uncertainAnswer) - 1] &&\r\n                                                    context.currentQuestion === 6, // change\r\n                                                actions: [\r\n                                                    assign({ counter: (context) => 0 }), assign({ currentMoney: (context) => context.moneyStages[context.currentQuestion] }),\r\n                                                    assign({ currentQuestion: (context) => context.currentQuestion + 1 }), assign({ remainingQuestions: (context) => context.remainingQuestions - 1 }),\r\n                                                    assign({ safePoint: (context) => '$50000' }),\r\n                                                    assign({ fiftyFiftyCounter: (context) => 1 })\r\n                                                ], // safe step\r\n                                            },\r\n                                            {\r\n                                                target: '#root.dm.playMillionaire.competitionQuestion.goodJob',\r\n                                                cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) &&\r\n                                                    context.correctAnswers[context.currentQuestion] === context.all5050Answers[context.currentQuestion][Number(context.uncertainAnswer) - 1] &&\r\n                                                    context.currentQuestion !== 1 && context.currentQuestion !== 6, \r\n                                                actions: [\r\n                                                    assign({ counter: (context) => 0 }), assign({ currentMoney: (context) => context.moneyStages[context.currentQuestion] }),\r\n                                                    assign({ currentQuestion: (context) => context.currentQuestion + 1 }), assign({ remainingQuestions: (context) => context.remainingQuestions - 1 }),\r\n                                                    assign({ fiftyFiftyCounter: (context) => 1 })\r\n                                                ], \r\n                                            },\r\n                                            {\r\n                                                target: '#root.dm.playMillionaire.competitionQuestion.youFailed',\r\n                                                cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) &&\r\n                                                    context.correctAnswers[context.currentQuestion] !== context.all5050Answers[context.currentQuestion][Number(context.uncertainAnswer) - 1],\r\n                                            },\r\n                                            {\r\n                                                target: '#root.dm.playMillionaire.competitionQuestion.fiftyFifty', \r\n                                                cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                                actions: assign({ counter: (context) => context.counter + 1 }),\r\n                                            },\r\n                                            {\r\n                                                target: '.nomatch',\r\n                                            }\r\n                                        ],\r\n                                        TIMEOUT: { target: '.makeSure' }\r\n                                    },\r\n                                    states: {\r\n                                        makeSure: {\r\n                                            entry: send((context) => ({\r\n                                                type: 'SPEAK',\r\n                                                value: context.finalAnswer[context.currentQuestion]\r\n                                            })),\r\n                                            on: {\r\n                                                ENDSPEECH: 'ask'\r\n                                            }\r\n                                        },\r\n                                        ask: {\r\n                                            entry: send('LISTEN'),\r\n                                        },\r\n                                        nomatch: {\r\n                                            entry: say(\"Sorry, I did not get that.\"),\r\n                                            on: { ENDSPEECH: 'makeSure' }\r\n                                        },\r\n                                    },\r\n                                },\r\n                            },\r\n                        },\r\n                        // switchQuestion\r\n                        switchQuestion: {\r\n                            initial: 'choose',\r\n                            states: {\r\n                                choose: {\r\n                                    always: [\r\n                                        { target: 'goBack', cond: (context) => context.switchCounter !== 0 },\r\n                                        { target: 'changeQuestion', cond: (context) => context.switchCounter === 0 },\r\n                                    ]\r\n                                },\r\n                                changeQuestion: {\r\n                                    entry: [send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: `Okay, let me change your question to our backup question`\r\n                                    })),\r\n                                        assign({ switchCounter: (context) => 1 })],\r\n                                    on: { ENDSPEECH: '#root.dm.playMillionaire.extraQuestion' }\r\n                                },\r\n                                goBack: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: `I am sorry, but you have already used up your switch question lifeline.`\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: '#root.dm.playMillionaire.competitionQuestion' \r\n                                    }\r\n                                },\r\n                            }\r\n                        },\r\n                        \r\n                        // final states\r\n                        goodJob: {\r\n                            entry: send((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: context.correctCongrats[context.currentQuestion-1] // change\r\n                            })),\r\n                            on: { ENDSPEECH: '#root.dm.playMillionaire.chitChat' }\r\n                        },\r\n                        youFailed: {\r\n                            entry: send((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `I'm sorry, but the correct answer was ${context.correctAnswers[context.currentQuestion]}. You will have to go home with ${context.safePoint}` // change\r\n                            })),\r\n                            on: { ENDSPEECH: '#root.dm.init' }\r\n                        },\r\n                    }\r\n                },\r\n\r\n                // extra question for change question lifeline\r\n                extraQuestion: {\r\n                    initial: 'choose',\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: '#root.dm.getHelp',\r\n                                cond: (context) => context.recResult[0].utterance.indexOf(\"help\") !== -1 || context.recResult[0].utterance.indexOf(\"Help\") !== -1\r\n                            },\r\n                            {\r\n                                target: '#root.dm.init',\r\n                                cond: (context) => context.recResult[0].utterance.indexOf(\"quit\") !== -1 || context.recResult[0].utterance.indexOf(\"Quit\") !== -1\r\n                            },\r\n                            {\r\n                                target: '.choose',\r\n                                cond: (context) => context.recResult[0].utterance.indexOf(\"repeat\") !== -1 || context.recResult[0].utterance.indexOf(\"Repeat\") !== -1\r\n                            },\r\n                            {\r\n                                target: '.check',\r\n                                cond: (context) => context.recResult[0].utterance.indexOf(\"first\") !== -1 || context.recResult[0].utterance.indexOf(\"one\") !== -1 || context.recResult[0].utterance.indexOf(\"1st\") !== -1 ||\r\n                                    context.recResult[0].utterance.indexOf(\"1\") !== -1 || context.recResult[0].utterance.indexOf(\"One\") !== -1 || context.recResult[0].utterance.indexOf(\"First\") !== -1,\r\n                                actions: assign({ uncertainAnswer: (context) => \"1\" })\r\n                            },\r\n                            {\r\n                                target: '.check',\r\n                                cond: (context) => context.recResult[0].utterance.indexOf(\"second\") !== -1 || context.recResult[0].utterance.indexOf(\"two\") !== -1 || context.recResult[0].utterance.indexOf(\"2nd\") !== -1 ||\r\n                                    context.recResult[0].utterance.indexOf(\"2\") !== -1 || context.recResult[0].utterance.indexOf(\"Two\") !== -1 || context.recResult[0].utterance.indexOf(\"Second\") !== -1,\r\n                                actions: assign({ uncertainAnswer: (context) => \"2\" })\r\n                            },\r\n                            {\r\n                                target: '.check',\r\n                                cond: (context) => context.recResult[0].utterance.indexOf(\"third\") !== -1 || context.recResult[0].utterance.indexOf(\"three\") !== -1 || context.recResult[0].utterance.indexOf(\"3rd\") !== -1 ||\r\n                                    context.recResult[0].utterance.indexOf(\"3\") !== -1 || context.recResult[0].utterance.indexOf(\"Three\") !== -1 || context.recResult[0].utterance.indexOf(\"Third\") !== -1,\r\n                                actions: [assign({ counter: (context) => 0 }), assign({ uncertainAnswer: (context) => \"3\" })]\r\n                            },\r\n                            {\r\n                                target: '.check',\r\n                                cond: (context) => context.recResult[0].utterance.indexOf(\"fourth\") !== -1 || context.recResult[0].utterance.indexOf(\"four\") !== -1 || context.recResult[0].utterance.indexOf(\"4th\") !== -1 ||\r\n                                    context.recResult[0].utterance.indexOf(\"4\") !== -1 || context.recResult[0].utterance.indexOf(\"Four\") !== -1 || context.recResult[0].utterance.indexOf(\"Fourth\") !== -1,\r\n                                actions: [assign({ counter: (context) => 0 }), assign({ uncertainAnswer: (context) => \"4\" })]\r\n                            },\r\n                            {\r\n                                target: '.nomatch',\r\n                                actions: assign({ counter: (context) => context.counter + 1 })\r\n                            },\r\n                        ],\r\n                        TIMEOUT: { actions: assign({ counter: (context) => context.counter + 1 }), target: '.choose' }\r\n                    },\r\n                    states: {\r\n                        choose: {\r\n                            always: [\r\n                                { target: 'prompt1', cond: (context) => context.counter === 0 },\r\n                                { target: 'prompt2', cond: (context) => context.counter === 1 },\r\n                                { target: 'prompt3', cond: (context) => context.counter === 2 },\r\n                                { target: 'youFailed', cond: (context) => context.counter === 3 },\r\n                            ]\r\n                        },\r\n                        prompt1: {\r\n                            entry: send((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: context.questions1[12]\r\n                            })),\r\n                            on: {\r\n                                ENDSPEECH: 'ask'\r\n                            }\r\n                        },\r\n                        prompt2: {\r\n                            entry: send((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: context.questions2[12]\r\n                            })),\r\n                            on: {\r\n                                ENDSPEECH: 'ask'\r\n                            }\r\n                        },\r\n                        prompt3: {\r\n                            entry: send((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: context.questions3[12]\r\n                            })),\r\n                            on: {\r\n                                ENDSPEECH: 'ask'\r\n                            }\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN'),\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry, I did not get that.\"),\r\n                            on: { ENDSPEECH: '#root.dm.playMillionaire.competitionQuestion' }\r\n                        },\r\n                        // check if sure\r\n                        check: {\r\n                            initial: 'makeSure',\r\n                            on: {\r\n                                RECOGNISED: [\r\n                                    {\r\n                                        target: 'goodJob',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) &&\r\n                                            context.correctAnswers[12] === context.allAnswersTotal[12][Number(context.uncertainAnswer) - 1] &&\r\n                                            context.currentQuestion === 1, // change\r\n                                        actions: [\r\n                                            assign({ counter: (context) => 0 }), assign({ currentMoney: (context) => context.moneyStages[context.currentQuestion] }),\r\n                                            assign({ currentQuestion: (context) => context.currentQuestion + 1 }), assign({ remainingQuestions: (context) => context.remainingQuestions - 1 }),\r\n                                            assign({ safePoint: (context) => '$1000' }),\r\n                                            assign({ switchCounter: (context) => 1 })\r\n                                        ], // safe step\r\n                                    },\r\n                                    {\r\n                                        target: 'goodJob',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) &&\r\n                                            context.correctAnswers[12] === context.allAnswersTotal[12][Number(context.uncertainAnswer) - 1] &&\r\n                                            context.currentQuestion === 6, // change\r\n                                        actions: [\r\n                                            assign({ counter: (context) => 0 }), assign({ currentMoney: (context) => context.moneyStages[context.currentQuestion] }),\r\n                                            assign({ currentQuestion: (context) => context.currentQuestion + 1 }), assign({ remainingQuestions: (context) => context.remainingQuestions - 1 }),\r\n                                            assign({ safePoint: (context) => '$50000' }),\r\n                                            assign({ switchCounter: (context) => 1 })\r\n                                        ], // safe step\r\n                                    },\r\n                                    {\r\n                                        target: 'goodJob',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) &&\r\n                                            context.correctAnswers[12] === context.allAnswersTotal[12][Number(context.uncertainAnswer) - 1] &&\r\n                                            context.currentQuestion !== 1 && context.currentQuestion !== 6, // change\r\n                                        actions: [\r\n                                            assign({ counter: (context) => 0 }), assign({ currentMoney: (context) => context.moneyStages[context.currentQuestion] }),\r\n                                            assign({ currentQuestion: (context) => context.currentQuestion + 1 }), assign({ remainingQuestions: (context) => context.remainingQuestions - 1 }),\r\n                                            assign({ switchCounter: (context) => 1 })\r\n                                        ], \r\n                                    },\r\n                                    {\r\n                                        target: 'youFailed',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) &&\r\n                                            context.correctAnswers[12] !== context.allAnswersTotal[12][Number(context.uncertainAnswer) - 1],\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.playMillionaire.competitionQuestion', // change\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                        actions: assign({ counter: (context) => context.counter + 1 }),\r\n                                    },\r\n                                    {\r\n                                        target: '.nomatch',\r\n                                    }\r\n                                ],\r\n                                TIMEOUT: { target: '.makeSure' }\r\n                            },\r\n                            states: {\r\n                                makeSure: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: context.finalAnswer[12] // change\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: 'ask'\r\n                                    }\r\n                                },\r\n                                ask: {\r\n                                    entry: send('LISTEN'),\r\n                                },\r\n                                nomatch: {\r\n                                    entry: say(\"Sorry, I did not get that.\"),\r\n                                    on: { ENDSPEECH: 'makeSure' }\r\n                                },\r\n\r\n                            },\r\n                        },\r\n\r\n                        // final states\r\n                        goodJob: {\r\n                            entry: send((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: context.correctCongrats[context.currentQuestion - 1] // change\r\n                            })),\r\n                            on: { ENDSPEECH: '#root.dm.playMillionaire.chitChat' }\r\n                        },\r\n                        youFailed: {\r\n                            entry: send((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `I'm sorry, but the correct answer was ${context.correctAnswers[12]}. You will have to go home with ${context.safePoint}` // change\r\n                            })),\r\n                            on: { ENDSPEECH: '#root.dm.init' }\r\n                        },\r\n                    }\r\n                },\r\n\r\n                chitChat: {\r\n                    initial: 'choose',\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: '#root.dm.getHelp',\r\n                                cond: (context) => context.recResult[0].utterance.indexOf(\"help\") !== -1 || context.recResult[0].utterance.indexOf(\"Help\") !== -1\r\n                            },\r\n                            {\r\n                                target: '#root.dm.init',\r\n                                cond: (context) => context.recResult[0].utterance.indexOf(\"quit\") !== -1 || context.recResult[0].utterance.indexOf(\"Quit\") !== -1\r\n                            },\r\n                            {\r\n                                target: '.choose',\r\n                                cond: (context) => context.recResult[0].utterance.indexOf(\"repeat\") !== -1 || context.recResult[0].utterance.indexOf(\"Repeat\") !== -1\r\n                            },\r\n                            {\r\n                                target: '.leave',\r\n                                cond: (context) => context.recResult[0].utterance.indexOf(\"leave\") !== -1 || context.recResult[0].utterance.indexOf(\"Leave\") !== -1\r\n                            },\r\n                            {\r\n                                target: '.checkMoney',\r\n                                cond: (context) => context.recResult[0].utterance.indexOf(\"money\") !== -1 || context.recResult[0].utterance.indexOf(\"Money\") !== -1\r\n                            },\r\n                            {\r\n                                target: '.checkQuestions',\r\n                                cond: (context) => context.recResult[0].utterance.indexOf(\"questions\") !== -1 || context.recResult[0].utterance.indexOf(\"Questions\") !== -1\r\n                            },\r\n                            {\r\n                                target: '#root.dm.playMillionaire.competitionQuestion',\r\n                                cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                actions: assign({ counter: (context) => 0 })\r\n                            },\r\n                            {\r\n                                target: '.negation',\r\n                                cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                actions: assign({ counter: (context) => context.counter + 1 }),\r\n                            },\r\n                            {\r\n                                target: '.nomatch',\r\n                                actions: assign({ counter: (context) => context.counter + 1 })\r\n                            },\r\n                        ],\r\n                        TIMEOUT: { actions: assign({ counter: (context) => context.counter + 1 }), target: '.choose' }\r\n                    },\r\n                    states: {\r\n                        choose: {\r\n                            always: [\r\n                                { target: '#root.dm.init', cond: (context) => context.currentQuestion === 12 },\r\n                                { target: 'prompt1', cond: (context) => context.counter === 0 },\r\n                                { target: 'prompt2', cond: (context) => context.counter === 1 },\r\n                                { target: 'prompt3', cond: (context) => context.counter === 2 },\r\n                                { target: '#root.dm.init', cond: (context) => context.counter === 3 },\r\n                            ]\r\n                        },\r\n                        prompt1: {\r\n                            entry: send((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: context.chitChat1[context.currentQuestion-1]\r\n                            })),\r\n                            on: {\r\n                                ENDSPEECH: 'ask'\r\n                            }\r\n                        },\r\n                        prompt2: {\r\n                            entry: send((context) => ({\r\n                                type: 'SPEAK', \r\n                                value: context.chitChat2[context.currentQuestion - 1]\r\n                            })),\r\n                            on: {\r\n                                ENDSPEECH: 'ask'\r\n                            }\r\n                        },\r\n                        prompt3: {\r\n                            entry: send((context) => ({\r\n                                type: 'SPEAK', \r\n                                value: context.chitChat3[context.currentQuestion - 1]\r\n                            })),\r\n                            on: {\r\n                                ENDSPEECH: 'ask'\r\n                            }\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN'),\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry, I did not get that.\"),\r\n                            on: { ENDSPEECH: '#root.dm.playMillionaire.chitChat' }\r\n                        },\r\n                        leave: {\r\n                            entry: send((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `Okay! Thank you for playing, and you will now leave with ${context.currentMoney}`\r\n                            })),\r\n                            on: { ENDSPEECH: '#root.dm.init' }\r\n                        },\r\n                        checkMoney: {\r\n                            entry: send((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `Let me have a look: your current potential winnings are ${context.currentMoney}, and your safety spot lies at ${context.safePoint}`\r\n                            })),\r\n                            on: { ENDSPEECH: '#root.dm.playMillionaire.chitChat' }\r\n                        },\r\n                        checkQuestions: {\r\n                            entry: send((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `Let me have a look. You just answered ${context.currentQuestion}, so you still have ${context.remainingQuestions} left to answer!`\r\n                            })),\r\n                            on: { ENDSPEECH: '#root.dm.playMillionaire.chitChat' }\r\n                        },\r\n                        negation: {\r\n                            entry: send((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `I am sorry, but you must proceed or decide to leave now!`\r\n                            })),\r\n                            on: { ENDSPEECH: '#root.dm.playMillionaire.chitChat' }\r\n                        },        \r\n                    }\r\n                },\r\n            }\r\n        },\r\n    }\r\n})\r\n\r\n\r\n","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, actions, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from \"./dmMillionaireNew\";\r\n\r\nimport createSpeechRecognitionPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/SpeechToText'\r\nimport createSpeechSynthesisPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/TextToSpeech';\r\n\r\n\r\nconst { send, cancel } = actions\r\n\r\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\r\nconst REGION = 'northeurope';\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\n\r\nconst defaultPassivity = 20\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n\r\n        asrtts: {\r\n            initial: 'init',\r\n            states: {\r\n                init: {\r\n                    on: {\r\n                        CLICK: {\r\n                            target: 'getToken',\r\n                            actions: [\r\n                                assign({\r\n                                    audioCtx: (_ctx) =>\r\n                                        new ((window as any).AudioContext || (window as any).webkitAudioContext)()\r\n                                }),\r\n                                (context) =>\r\n                                    navigator.mediaDevices.getUserMedia({ audio: true })\r\n                                        .then(function(stream) { context.audioCtx.createMediaStreamSource(stream) })\r\n                            ]\r\n                        }\r\n                    }\r\n                },\r\n                getToken: {\r\n                    invoke: {\r\n                        id: \"getAuthorizationToken\",\r\n                        src: (_ctx, _evt) => getAuthorizationToken(),\r\n                        onDone: {\r\n                            actions: [\r\n                                assign((_context, event) => { return { azureAuthorizationToken: event.data } }),\r\n                                'ponyfillASR'],\r\n                            target: 'ponyfillTTS'\r\n                        },\r\n                        onError: {\r\n                            target: 'fail'\r\n                        }\r\n                    }\r\n                },\r\n                ponyfillTTS: {\r\n                    invoke: {\r\n                        id: 'ponyTTS',\r\n                        src: (context, _event) => (callback, _onReceive) => {\r\n                            const ponyfill = createSpeechSynthesisPonyfill({\r\n                                audioContext: context.audioCtx,\r\n                                credentials: {\r\n                                    region: REGION,\r\n                                    authorizationToken: context.azureAuthorizationToken,\r\n                                }\r\n                            });\r\n                            const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\r\n                            context.tts = speechSynthesis\r\n                            context.ttsUtterance = SpeechSynthesisUtterance\r\n                            context.tts.addEventListener('voiceschanged', () => {\r\n                                context.tts.cancel()\r\n                                const voices = context.tts.getVoices();\r\n                                let voiceRe = RegExp(\"en-US\", 'u')\r\n                                if (process.env.REACT_APP_TTS_VOICE) {\r\n                                    voiceRe = RegExp(process.env.REACT_APP_TTS_VOICE, 'u')\r\n                                }\r\n                                const voice = voices.find(voice => /Brandon/u.test(voice.name))! //voices.find((v: any) => voiceRe.test(v.name))! - this was based on the solution linked by Nadina Suditu\r\n                                if (voice) {\r\n                                    context.voice = voice\r\n                                    callback('TTS_READY')\r\n                                } else {\r\n                                    console.error(`TTS_ERROR: Could not get voice for regexp ${voiceRe}`)\r\n                                    callback('TTS_ERROR')\r\n                                }\r\n                            })\r\n                        }\r\n                    },\r\n                    on: {\r\n                        TTS_READY: 'idle',\r\n                        TTS_ERROR: 'fail'\r\n                    }\r\n                },\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    },\r\n                },\r\n                recognising: {\r\n                    initial: 'noinput',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => {\r\n                                    return {\r\n                                        recResult: event.value\r\n                                    }\r\n                                })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle',\r\n                        SELECT: 'idle',\r\n                        CLICK: '.pause',\r\n                    },\r\n                    states: {\r\n                        noinput: {\r\n                            entry: [\r\n                                'recStart',\r\n                                send(\r\n                                    { type: 'TIMEOUT' },\r\n                                    { delay: (context) => (500 * (context.tdmPassivity || defaultPassivity)), id: 'timeout' }\r\n                                )],\r\n                            on: {\r\n                                TIMEOUT: '#root.asrtts.idle',\r\n                                STARTSPEECH: 'inprogress'\r\n                            },\r\n                            exit: cancel('timeout')\r\n                        },\r\n                        inprogress: {\r\n                        },\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                        pause: {\r\n                            entry: 'recStop',\r\n                            on: { CLICK: 'noinput' }\r\n                        }\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                        SELECT: 'idle',\r\n                        CLICK: { target: 'idle', actions: send('ENDSPEECH') }\r\n                    },\r\n                    exit: 'ttsStop',\r\n                },\r\n                fail: {}\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('U>', context.recResult[0][\"utterance\"], context.recResult[0][\"confidence\"]);\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n    alternative: any;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    var promptText = ((props.state.context.tdmVisualOutputInfo || [{}])\r\n        .find((el: any) => el.attribute === \"name\") || {}).value;\r\n    var promptImage = ((props.state.context.tdmVisualOutputInfo || [{}])\r\n        .find((el: any) => el.attribute === \"image\") || {}).value;\r\n    var circleClass = \"circle\"\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'fail' }) || props.state.matches({ dm: 'fail' }):\r\n            break;\r\n        case props.state.matches({ asrtts: { recognising: 'pause' } }):\r\n            promptText = \"Click to continue\"\r\n            break;\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            circleClass = \"circle-recognising\"\r\n            promptText = promptText || 'Listening...'\r\n            break;\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            circleClass = \"circle-speaking\"\r\n            promptText = promptText || 'Speaking...'\r\n            break;\r\n        case props.state.matches({ dm: 'idle' }):\r\n            promptText = \"Click to play Who Wants to be a Millionaire!\"\r\n            circleClass = \"circle-click\"\r\n            break;\r\n        case props.state.matches({ dm: 'init' }):\r\n            promptText = \"Click to play Who Wants to be a Millionaire!\"\r\n            circleClass = \"circle-click\"\r\n            break;\r\n        default:\r\n            promptText = promptText || '\\u00A0'\r\n    }\r\n    return (\r\n        <div className=\"control\">\r\n            <figure className=\"prompt\">\r\n                {promptImage &&\r\n                    <img src={promptImage}\r\n                        alt={promptText} />}\r\n            </figure>\r\n            <div className=\"status\">\r\n                <button type=\"button\" className={circleClass}\r\n                    style={{}} {...props}>\r\n                </button>\r\n                <div className=\"status-text\">\r\n                    {promptText}\r\n                </div>\r\n            </div>\r\n        </div>);\r\n}\r\n\r\nconst FigureButton = (props: Props): JSX.Element => {\r\n    const caption = props.alternative.find((el: any) => el.attribute === \"name\").value\r\n    const imageSrc = (props.alternative.find((el: any) => el.attribute === \"image\") || {}).value\r\n    return (\r\n        <figure className=\"flex\" {...props}>\r\n            {imageSrc &&\r\n                <img src={imageSrc} alt={caption} />}\r\n            <figcaption>{caption}</figcaption>\r\n        </figure>\r\n    )\r\n}\r\n\r\nfunction App() {\r\n    const [current, send] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n\r\n            changeColour: asEffect((context) => {\r\n                document.body.style.background = context.recResult[0].utterance;\r\n                /* console.log('Ready to receive a voice input.'); */\r\n            }),\r\n\r\n            recStart: asEffect((context) => {\r\n                context.asr.start()\r\n                /* console.log('Ready to receive a voice input.'); */\r\n            }),\r\n            recStop: asEffect((context) => {\r\n                context.asr.abort()\r\n                /* console.log('Recognition stopped.'); */\r\n            }),\r\n            ttsStart: asEffect((context) => {\r\n                let content = `<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xmlns:mstts=\"http://www.w3.org/2001/mstts\" xml:lang=\"en-US\"><voice name=\"${context.voice.name}\">`\r\n                content = content + (process.env.REACT_APP_TTS_LEXICON ? `<lexicon uri=\"${process.env.REACT_APP_TTS_LEXICON}\"/>` : \"\")\r\n                content = content + `${context.ttsAgenda}</voice></speak>`\r\n                console.debug(content)\r\n                const utterance = new context.ttsUtterance(content);\r\n                console.log(\"S>\", context.ttsAgenda)\r\n                utterance.voice = context.voice\r\n                utterance.onend = () => send('ENDSPEECH')\r\n                context.tts.speak(utterance)\r\n            }),\r\n            ttsStop: asEffect((context) => {\r\n                /* console.log('TTS STOP...'); */\r\n                context.tts.cancel()\r\n            }),\r\n            ponyfillASR: asEffect((context, _event) => {\r\n                const\r\n                    { SpeechRecognition }\r\n                        = createSpeechRecognitionPonyfill({\r\n                            audioContext: context.audioCtx,\r\n                            credentials: {\r\n                                region: REGION,\r\n                                authorizationToken: context.azureAuthorizationToken,\r\n                            }\r\n                        });\r\n                context.asr = new SpeechRecognition()\r\n                context.asr.lang = process.env.REACT_APP_ASR_LANGUAGE || 'en-US'\r\n                context.asr.continuous = true\r\n                context.asr.interimResults = true\r\n                context.asr.onresult = function(event: any) {\r\n                    var result = event.results[0]\r\n                    if (result.isFinal) {\r\n                        send({\r\n                            type: \"ASRRESULT\", value:\r\n                                [{\r\n                                    \"utterance\": result[0].transcript,\r\n                                    \"confidence\": result[0].confidence\r\n                                }]\r\n                        })\r\n                    } else {\r\n                        send({ type: \"STARTSPEECH\" });\r\n                    }\r\n                }\r\n\r\n            })\r\n        }\r\n    });\r\n    const figureButtons = (current.context.tdmExpectedAlternatives || []).filter((o: any) => o.visual_information)\r\n        .map(\r\n            (o: any, i: any) => (\r\n                <FigureButton state={current}\r\n                    alternative={o.visual_information}\r\n                    key={i}\r\n                    onClick={() => send({ type: 'SELECT', value: o.semantic_expression })} />\r\n            )\r\n        )\r\n\r\n    switch (true) {\r\n        default:\r\n            return (\r\n                <div className=\"App\">\r\n                    <ReactiveButton state={current} alternative={{}} onClick={() => send('CLICK')} />\r\n                    <div className=\"select-wrapper\">\r\n                        <div className=\"select\">\r\n                            {figureButtons}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n    }\r\n\r\n};\r\n\r\nconst getAuthorizationToken = () => (\r\n    fetch(new Request(TOKEN_ENDPOINT, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY!\r\n        },\r\n    })).then(data => data.text()))\r\n\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);\r\n"],"sourceRoot":""}